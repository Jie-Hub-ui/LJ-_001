 -----------------------------------------------------
|                Linux三剑客之awk实战详解             |
|        原文位置：Linux三剑客之awk实战详解           |
 -----------------------------------------------------
 
 
awk 是一款强大的文本分析工具,在对数据分析并生成报告时,显得尤为强悍。

1、使用场景：
	1. 能够将给定的文本内容,按照我们期望的格式输出显示,打印成报表。
	2. 分析处理系统日志,快速地分析挖掘我们关心的数据,并生成统计信息；
	3. 方便地用来统计数据,比如网站的访问量，访问的 IP 量等；
	4. 通过各种工具的组合,快速地汇总分析系统的运行信息,让你对系统的运行了如指掌；
	5. 强大的脚本语言表达能力,支持循环、条件、数组等语法,助你分析更加复杂的数据；
	......
	比较擅长处理格式化的文本,比如 日志、csv 格式数据等;
	
2、原理
	awk 基本命令格式:
		awk 'BEGIN{cmds} pattern{cmds} END{cmds}'
	1.首先,执行关键字 BEGIN 标识的 {} 中的命令;
	2.完成 BEGIN 大括号中命令的后,开始执行 body 命令;
	3.逐行读取数据,默认读到 \n 分割的内容为一条 记录,其实就是行的概念；
	4.将记录按照指定的分隔符划分为 字段,其实就是列的概念;
	5.循环执行 body 块中的命令,每读取一行,执行一次 body,最终完成 body 执行；
	6.最后,执行 END 命令,通常会在 END 中输出最后的结果;
	awk 是输入驱动的,有多少输入行,就会执行多少次 body 命令。

3、入门
	方便举例,信息保存至file.txt,内容如下：
		-rw-r--r-- 1 root 52457 Aug 10 2019 ngx_http.c
		-rw-r--r-- 1 mary 5257  Dec 12 2019 ngx_http.h
		-rw-r--r-- 1 dave 557   Aug 13 2019 ngx_http_config.c
	
	3.1 输出1、4、8列
		awk '{print $1,$4,$8}' file.txt
		大括号里边的就是 awk 语句,只能被单引号包含,其中,$1..$N表示第几列,$0 表示整个行内容
	3.2 格式化输出
		awk '{printf "%-4s %-4s %-6s %-8s\n", $1, $2, $3, $4}' file.txt
		%s 表示字符串占位符,-4表示列宽度为 4,且左对齐,我们还可以根据需要,列出更复杂的格式来.

	3.3 过滤记录
		awk '$3 = "root" && $6 = 10 {print $0}' file.txt
		过滤条件为,第 3 列为 root 且第 6 列为 10 的行才会被输出。
	awk 支持各种比较运算符号 !=、>、<、>=、<=,其中 $0 表示整行的所有内容。
 
	3.4 内置变量
		awk '$3 = "root" || NR = 2 {printf("%2s %s %10s\n", NR, $1, $NF)}' file.txt
		过滤第 3 列为 root 用户,以及第 2 行内容,且打印时输出行号。NR 表示当前第几行,NF表示当前行有几列。
	
	3.5 指定分隔符
		数据不总是以空格为分隔符,我们可以通过 FS 变量指定分隔符:
		awk 'BEGIN{FS=2019} {print %1, "*" , $2}' file.txt
		指定分隔符为 2019,这样就将行内容分割为了两部分,将 2019 替换成了*显示。
		也可通过-F选项指定分隔符:
		awk -F'2019' '{print $1, "*", $2}' file.txt
		
	3.6 指定输出时段与段之间的分隔符:
		awk '{print $1, $2, $3, $4, $5, $6, $7, $8}' OFS=":" file.txt
		输出时,各字段用 OFS 指定的符号进行了分隔。
	
	3.7 条件匹配
		列出root用户的全部内容：
			awk '$3 ~ /root/ || NR = 1 {print NR, $0}' file.txt
		匹配第三列中包含 root 的行,~ 其实就是正则表达式的匹配。
		
		awk 可以像 grep 一样匹配某一行:
			awk '/Aug/' file.txt
		
		取反使用 ！
			awk '$3 !~ /root/ {print $0}' file.txt
	
	3.8 拆分文件
		可以将文本信息拆分为多个文件,下边命令按照月份(第5列)将文件信息拆分为多个文件
			awk '{print %0 > $5}' file.txt
		awk 支持重定向符号 >,直接将每行内容重定向到月份命名的文件了,当然你也可以把指定的列输出到文件.
		
	3.9 if语句
		复杂的条件判断,可以使用 awk 的 if 语句,awk 的强大正因为它是个脚本解释器,拥有一般脚本语言的编程能力,下边示例通过稍微复杂的条件进行拆分文件:
			awk '{if($1 = "root") print > "root.txt";\
				   else if($3 = "dave") print > "dave.txt";\
				   else print > "mary.txt"}' file.txt
		要注意,if 语句是在大括号里边的。将对应字段匹配的信息重定向到对应文件中。
	
	3.10 统计
		ls -l *.c *.h | awk '{sum+=$5} END{print sum}'
		ls -l第五列表示文件大小,每读取一行就会将该文件大小计算到 sum 变量中,在最后 END 阶段打印出 sum,也就是所有文件的大小总和。
		
		统计用户进程占用多少内存:
			ps aux | awk 'NR != 1 {a[$1]+=$6 END{for(i in a) print i,a[i]}}'
		这里用到了 数组 和 for 循环,值得一提的是,awk 的数组可以理解为字典或 Map,key 可以是数值和字符串,这种数据类型在平时很常用。
	
	3.11 字符串
		awk '{if(length($4) = 4) print $2,toupper($3)}' file.txt
		awk 内置支持一系列的字符串函数,length 计算字符串长度,toupper 函数转换字符串为大写。
	
	
4、实战(awk脚本方式)
	假设一个学生成绩单score.txt
		Marry	2143	78	84	77
		Jack	2321 	66	78	45
		Tom		2122	48	77	71
		Mike	2537	87	97	95
		Bob		2415	40	57	62
	
	4.1 编写awk脚本 cal.awk
		#!bin/awk -f
		BEGIN{
			math = 0
			english = 0
			computer = 0
			print "NAME		NO.		MATH	ENGLISH		COMPUTER	TOTAL\n	"
			print "---------------------------------------------------------\n"
		}
		{
			math+=$3
			english+=$4
			computer+=$5
			print "%-6s %-6s %4d %8d %8d %8d\n", $1, $2, $3, $4, $5, $3+$4+$5 
		}
		END{
			print "---------------------------------------------------------\n"
			print "	TOTAL:%10d %8d %8d", math, english, computer
			print "	AVERAGE:%10.2f %8.2f %8.2f", math/NR, english/NR, computer/NR
		}
		
	4.2 执行
		awk -f cal.awk score.txt
	
	我们可以将复杂的 awk 语句写入脚本文件 cal.awk,然后通过 -f 选项指定从脚本文件执行。
	在 BEGIN 阶段,我们初始化了相关变量,并打印了表头的格式。
	在 body 阶段,我们读取每一行数据,计算该学科和该同学的总成绩。
	在 END 阶段,我们先打印了表尾的格式,并打印总成绩,以及计算了平均值。
		
5、总结归纳
	5.1 内置变量
		每一行内容记录,叫做记录,英文名称 Record
		每行中通过分隔符隔开的每一列,叫做字段,英文名称 Field
		明确这几个概念后,我们来总结几个重要的内置变量：
			NR：表示当前的行数;
			NF：表示当前的列数;
			RS：行分隔符，默认是换行;
			FS：列分隔符，默认是空格和制表符;
			OFS：输出列分隔符，用于打印时分割字段,默认为空格;
			ORS：输出行分隔符，用于打印时分割记录,默认为换行符;
	
	5.2 输出格式
		awk 提供 printf 函数进行格式化输出功能,具体的使用方式和 C 语法基本一致
		常用的格式化方式：
			%d 十进制有符号整数
			%u 十进制无符号整数
			%f 浮点数
			%s 字符串
			%c 单个字符
			%e 指数形式的浮点数
			%x %X 无符号以十六进制表示的整数
			%0 无符号以八进制表示的整数
			%g 自动选择合适的表示法
			\n 换行符
			\t Tab符
	
	5.3 编程语句
		awk 不仅是一个 Linux 命令行工具，它其实是一门脚本语言，支持程序设计语言所有的控制结构，它支持：
			条件语句
			循环语句
			数组
			函数
			
	5.4 常用函数
		awk 内置了大量的有用函数功能,也支持自定义函数,允许你编写自己的函数来扩展内置函数。
		这里只简单罗列一些比较常用的字符串函数：
			index(s, t) 返回子串 t 在 s 中的位置
			length(s) 返回字符串 s 的长度
			split(s, a, sep) 分割字符串,并将分割后的各字段存放在数组 a 中
			substr(s, p, n) 根据参数,返回子串
			tolower(s) 将字符串转换为小写
			toupper(s) 将字符串转换为大写
		